// app/components/MyForm.tsx (or pages/MyForm.tsx)
"use client";

import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

// 1. Define Zod schema
const formSchema = z.object({
  name: z.string().min(2, "Name must be at least 2 characters"),
  email: z.string().email("Invalid email address"),
  age: z
    .string()
    .regex(/^\d+$/, "Age must be a number")
    .transform((val) => parseInt(val, 10))
    .refine((val) => val > 0, "Age must be positive"),
});

// 2. Infer TS type from schema
type FormData = z.infer<typeof formSchema>;

export default function MyForm() {
  const { register, handleSubmit, formState: { errors, isSubmitting } } = useForm<FormData>({
    resolver: zodResolver(formSchema),
  });

  const onSubmit = async (data: FormData) => {
    try {
      // Example: submit to an API route
      const res = await fetch("/api/submit-form", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });
      if (!res.ok) throw new Error("Failed to submit form");
      alert("Form submitted successfully!");
    } catch (err) {
      console.error(err);
      alert("Error submitting form");
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <label>Name:</label>
        <input {...register("name")} className="border p-2" />
        {errors.name && <p className="text-red-500">{errors.name.message}</p>}
      </div>

      <div>
        <label>Email:</label>
        <input {...register("email")} className="border p-2" />
        {errors.email && <p className="text-red-500">{errors.email.message}</p>}
      </div>

      <div>
        <label>Age:</label>
        <input {...register("age")} className="border p-2" />
        {errors.age && <p className="text-red-500">{errors.age.message}</p>}
      </div>

      <button type="submit" disabled={isSubmitting} className="bg-blue-500 text-white px-4 py-2">
        {isSubmitting ? "Submitting..." : "Submit"}
      </button>
    </form>
  );
}
